#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")
---
#@ def config():
vault:
  role: #@ data.values.vault.role
  token: #@ data.values.vault.token
  host: #@ data.values.vault.host
aws:
  aws_access_key_id: #@ data.values.r53.access_key
  s3: 
    bucket: #@ data.values.s3.bucket
    secret_key: #@ data.values.s3.secret_key
    access_key: #@ data.values.s3.access_key
    region: #@ data.values.s3.region
appsso:
  clientId: #@ data.values.appsso.clientId
  clientSecret: #@ data.values.appsso.clientSecret
  audience: #@ data.values.appsso.audience
git:
  clientid: #@ data.values.common.repos.oauth.clientid
  clientsecret: #@ data.values.common.repos.ssh.clientsecret
  url: #@ data.values.git.url
  ref: #@ data.values.git.ref
  host: #@ data.values.common.repos.ssh.host
  private_key: #@ data.values.common.repos.ssh.privatekey
  public_key: #@ data.values.common.repos.ssh.publickey
  known_hosts: #@ data.values.common.repos.ssh.knownhosts
git_pr:
  host: #@ data.values.common.repos.ssl.host
  user: #@ data.values.common.repos.ssl.user
  password: #@ data.values.common.repos.ssl.password
tap:
  ca: #@ data.values.tap.registry.ca_cert_data
  #! appliveview_connector: #@ "appliveview." + data.values.tap.base.domain
  appliveview_connector: appliveview.run.appref.end2end.link
  sso:
    issuer_uri: #@ data.values.common.sso.issuer_uri
    client_id: #@ data.values.common.sso.client_id
    client_secret: #@ data.values.common.sso.client_secret
  tap_gui:
    iterate: 
      sa_token: #@ data.values.clusters.view.tap_gui.appref_2.sa_token
      api_server_url: #@ data.values.clusters.view.tap_gui.appref_2.api_server_url
      api_server_ca: #@ data.values.clusters.view.tap_gui.appref_2.api_server_ca
    view: 
      sa_token: #@ data.values.clusters.view.tap_gui.appref_1.sa_token
      api_server_url: #@ data.values.clusters.view.tap_gui.appref_1.api_server_url
      api_server_ca: #@ data.values.clusters.view.tap_gui.appref_1.api_server_ca
  cert:
    cn: #@ "*."+data.values.tap.base.domain
  catalog: #@ data.values.catalog
  namespace: tap-install
  devNamespace: canary
  supply_chain:
    gitops:
      repository_owner: tanzu-end-to-end
      server_address: https://github.com
  domains:
    base: #@ data.values.tap.base.domain
    cnr: #@ data.values.tap.base.domain
    learningcenter: #@ "learningcenter."+data.values.tap.base.domain
    tapGui: #@ "tap-gui."+data.values.tap.base.domain
    accelerator: #@ "accelerator."+data.values.tap.base.domain
    metadata_store: #@ "https://metadata-store."+data.values.tap.base.domain
  metadatastore:
    ca: #@ data.values.clusters.build.metadatastore.ingress_ca
    auth_token:  #@ data.values.clusters.build.metadatastore.auth_token
  credentials:
    #! Pick one registry for downloading images: Tanzu Network or Pivotal Network
    #! (use tanzuNet as key).
    tanzuNet: #! Host to fetch the package fron
      host: registry.tanzu.vmware.com
      username: #@ data.values.tap.tanzunet.username
      password: #@ data.values.tap.tanzunet.password
    registry:
      ca_cert_data: #@ data.values.tap.registry.ca_cert_data
      repositories: 
        buildService: #@ data.values.tap.registry.location
      host: #@ data.values.tap.registry.host
      username: #@ data.values.tap.registry.username
      password: #@ data.values.tap.registry.password
    supplychainregistry:
      repositories: 
        ootbSupplyChain: #@ data.values.tap.supplychainregistry.location
      host: #@ data.values.tap.supplychainregistry.host
      username: #@ data.values.tap.supplychainregistry.username
      password: #@ data.values.tap.supplychainregistry.password
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-install-gitops
  namespace: tap-install
  annotations:
    kapp.k14s.io/change-rule: "delete after deleting tap-install-gitops/app"
stringData:
  tap-secrets.yml: #@ yaml.encode(config())